```{r}
#| label: tbl-basefunc
#| cache: true
#| cache.comments: false

basetabfunc_inner <- function(x, data, stratavar, catdig, contdig) {
  tmp <- data %>%
    filter(!is.na(!!sym(x)) & !is.na(!!sym(stratavar)))

  pmis <- data %>%
    filter(!is.na(!!sym(stratavar))) %>%
    mutate(mis = factor(if_else(is.na(!!sym(x)), 1, 0), levels = 0:1)) %>%
    count(mis, .drop = F) %>%
    mutate(pmis = fn(n / sum(n) * 100, catdig)) %>%
    filter(mis == "1") %>%
    pull(pmis)

  cl <- class(data %>% pull(!!sym(x)))
  if (cl %in% c("character", "factor")) {
    out <- tmp %>%
      group_by(!!sym(stratavar), .drop = F) %>%
      count(!!sym(x), .drop = F) %>%
      mutate(
        out = paste0(n, " (", fn(n / sum(n) * 100, catdig), ")"),
        out = if_else(n < 10, "<10", out),
        level = !!sym(x)
      ) %>%
      ungroup() %>%
      select(!!sym(stratavar), out, level) %>%
      pivot_wider(names_from = !!sym(stratavar), values_from = out)

    # p-value
    p <- fn(chisq.test(tmp %>% pull(!!sym(stratavar)), tmp %>% pull(!!sym(x)))$p.value, p = T, dig = 3)

    # if levels No, Yes only present Yes
    levs <- out %>% pull(level)
    nlevs <- length(levs)
    if (nlevs == 2 & all(levs %in% c("No", "Yes"))) {
      out <- out %>%
        filter(level == "Yes") %>%
        mutate(
          var = x,
          p = p,
          pmis = pmis,
          level = NA
        )
    } else {
      out <- out %>%
        mutate(
          var = NA,
          p = NA,
          pmis = NA
        )
      out <- out %>% add_row(
        var = x,
        p = p,
        pmis = pmis,
        .before = 1
      )
    }
  } else if (cl %in% c("numeric")) {
    if (length(contdig) > 1) {
      if (any(contdig$vars %in% x)) {
        contdig <- contdig %>%
          filter(vars == x) %>%
          pull(contdig)
      } else {
        contdig <- 0
      }
    }
    tmp <- data %>%
      filter(!is.na(!!sym(x)) & !is.na(!!sym(stratavar)))
    out <- tmp %>%
      group_by(!!sym(stratavar), .drop = F) %>%
      reframe(
        med = quantile(!!sym(x), na.rm = T, probs = c(0.5)),
        q1 = quantile(!!sym(x), na.rm = T, probs = c(0.25)),
        q3 = quantile(!!sym(x), na.rm = T, probs = c(0.75)),
        n = n()
      ) %>%
      mutate(
        out = paste0(fn(med, contdig), " [", fn(q1, contdig), "-", fn(q3, contdig), "]"),
        out = if_else(n < 10, "<10", out)
      ) %>%
      ungroup() %>%
      select(!!sym(stratavar), out) %>%
      pivot_wider(names_from = !!sym(stratavar), values_from = out)

    # p-value
    p <- fn(kruskal.test(formula(paste0(x, " ~ ", stratavar)), data = tmp)$p.value, p = T, dig = 3)

    out <- out %>%
      mutate(
        var = x,
        p = p,
        pmis = pmis
      )
  } else {
    stop("Unknown class in baseline table")
  }
}

# numvarscheck <- rsdata %>%
#  head(100) %>%
#  select(!!!syms(tabvars)) %>%
#  select(where(is.numeric))

contdiguse <- tibble(vars = c("shf_potassium"), contdig = 1)

basetabfunc <- function(data, stratavar, catdig = 0, contdig = contdiguse, novar = NULL) {
  if (!is.null(novar)) tabvars <- tabvars[!tabvars %in% novar]
  tab <<- data %>%
    count(!!sym(stratavar), .drop = F) %>%
    mutate(n = paste0(n, " (", fn(n / sum(n) * 100, catdig), ")")) %>%
    pivot_wider(names_from = !!sym(stratavar), values_from = n) %>%
    mutate(
      var = "N (%)",
      level = NA,
      p = NA,
      pmis = NA
    ) %>%
    select(var, level, pmis, levels(data %>% pull(!!sym(stratavar))), p)

  for (i in seq_along(tabvars)) {
    tabtmp <- basetabfunc_inner(tabvars[i], data = data, stratavar = stratavar, catdig = catdig, contdig = contdig)
    tab <<- bind_rows(tab, tabtmp)
  }

  tab <- tab %>%
    mutate(
      # if recoding or categorizing will still get org label
      var_tmp = str_replace_all(var, "(_cat2|_cat)", ""),
      # if shf/sos combination  will still get org label
      var_tmp = str_replace_all(var_tmp, "shf_sos_com_", "sos_com_")
    )

  tab <- left_join(tab,
    metavars %>%
      select(variable, label, unit),
    by = c("var_tmp" = "variable")
  ) %>%
    mutate(
      Variable = coalesce(label, var_tmp),
      Variable = if_else(!is.na(unit),
        paste0(Variable, " (", unit, ")"),
        Variable
      ),
      Variable = if_else(!is.na(level) & !is.na(Variable),
        paste0(Variable, " ", level),
        coalesce(Variable, paste0("  ", level))
      ),
      # small fixes
      Variable = str_replace_all(Variable, fixed("Disposable income (100 SEK)"), "Income")
    )

  levs <- levels(rsdata %>% pull(!!sym(stratavar)))
  if (stratavar == "sos_com_copd") {
    levs <- str_replace(levs, "No", "No COPD")
    levs <- str_replace(levs, "Yes", "COPD")
  }
  cn <- c("Variable", "Missing (%)", levs, "p-value")

  # excel
  tab_xls <- tab %>%
    mutate(
      footnote1 = if_else(!is.na(var) & var %in% modvars, "*", "")
    ) %>%
    unite(footnote, starts_with("footnote"), sep = "") %>%
    mutate(Variable = paste0(Variable, footnote)) %>%
    select(Variable, pmis:p)
  tab_xls <- tab_xls %>%
    add_row(Variable = "*Included in multiple imputation, logistic and cox regression models.")

  make_one_xlsxsheet(tab_xls, colnames = cn)

  # footnotes
  tab <- tab %>%
    mutate(
      footnote1s = if_else(!is.na(var) & var %in% modvars, footnote_marker_symbol(1), ""),
      footnote1n = if_else(!is.na(var) & str_detect(var, "^shf_"), footnote_marker_alphabet(1), ""),
      footnote2n = if_else(!is.na(var) & str_detect(var, "sos_com_"), footnote_marker_alphabet(2), ""),
      footnote3n = if_else(!is.na(var) & str_detect(var, "sos_lm_"), footnote_marker_alphabet(3), ""),
      footnote4n = if_else(!is.na(var) & str_detect(var, "^scb_"), footnote_marker_alphabet(4), "")
    ) %>%
    unite(footnote, starts_with("footnote"), sep = "") %>%
    mutate(
      # so no probs
      Variable = sanitize_text(Variable),
      Variable = paste0(Variable, footnote),
      Variable = str_replace_all(Variable, fixed("Â²"), "\\textsuperscript{2}")
    ) %>%
    select(Variable, pmis:p)

  indent_rows <- tab %>%
    mutate(
      indent_rows = str_detect(Variable, "  "),
      rows = row_number()
    ) %>%
    filter(indent_rows) %>%
    pull(rows)

  cn <- sanitize_text(cn)
  if (stratavar == "sos_com_copd2") {
    cn <- str_replace(cn, "COPD without hospitalization", "COPD without\nhospitalization")
    cn <- str_replace(cn, fixed("COPD $>$=1 hospitalization"), "COPD $>$=1\nhospitalization")
  }
  cn <- linebreak(cn, align = "l")

  default_kable(tab,
    font_size = 6,
    longtable = TRUE,
    escape = FALSE,
    col.names = cn
  ) %>%
    add_indent(indent_rows) %>%
    footnote(
      footnote_order = c("general", "symbol", "alphabet"),
      general_title = "",
      general = c(
        "Categorical variables are presented with n (%) and tested with chi-square test and continuous variables with median [q1-q3] and tested with Kruskal-Wallis test."
      ),
      symbol = c(
        "Included in multiple imputation, logistic and cox regression models."
      ),
      alphabet = c(
        "Source: SwedeHF",
        "Source: The National Patient Register",
        "Source: The Prescribed Drug Register",
        "Source: LISA/Register of the Total Population"
      ),
      threeparttable = T
    )
}
```

```{r}
#| label: tbl-base
#| cache: true
#| cache.comments: false
#| dependson: tbl-basefunc
#| tbl-cap: "Baseline characteristics"
basetabfunc(data = rsdata, stratavar = "sos_com_copd")
```

```{r}
#| label: tbl-base-ref
#| cache: true
#| cache.comments: false
#| dependson: tbl-basefunc
#| tbl-cap: "Baseline characteristics - HFrEF"
basetabfunc(data = rsdata %>% filter(shf_ef_cat == "HFrEF"), stratavar = "sos_com_copd", novar = "shf_ef_cat")
```

```{r}
#| label: tbl-base-mref
#| cache: true
#| cache.comments: false
#| dependson: tbl-basefunc
#| tbl-cap: "Baseline characteristics - HFmrEF"
basetabfunc(data = rsdata %>% filter(shf_ef_cat == "HFmrEF"), stratavar = "sos_com_copd", novar = "shf_ef_cat")
```

```{r}
#| label: tbl-base-pef
#| cache: true
#| cache.comments: false
#| dependson: tbl-basefunc
#| tbl-cap: "Baseline characteristics - HFpEF"
basetabfunc(data = rsdata %>% filter(shf_ef_cat == "HFpEF"), stratavar = "sos_com_copd", novar = "shf_ef_cat")
```

```{r}
#| label: tbl-base-3
#| cache: true
#| cache.comments: false
#| dependson: tbl-basefunc
#| tbl-cap: "Baseline characteristics - 3 groups"
basetabfunc(data = rsdata, stratavar = "sos_com_copd2")
```

```{r}
#| label: tbl-base-3-ref
#| cache: true
#| cache.comments: false
#| dependson: tbl-basefunc
#| tbl-cap: "Baseline characteristics - 3 groups HFrEF"
basetabfunc(data = rsdata %>% filter(shf_ef_cat == "HFrEF"), stratavar = "sos_com_copd2", novar = "shf_ef_cat")
```

```{r}
#| label: tbl-base-3-mref
#| cache: true
#| cache.comments: false
#| dependson: tbl-basefunc
#| tbl-cap: "Baseline characteristics - 3 groups HFmrEF"
basetabfunc(data = rsdata %>% filter(shf_ef_cat == "HFmrEF"), stratavar = "sos_com_copd2", novar = "shf_ef_cat")
```

```{r}
#| label: tbl-base-3-pef
#| cache: true
#| cache.comments: false
#| dependson: tbl-basefunc
#| tbl-cap: "Baseline characteristics - 3 groups HFpEF"
basetabfunc(data = rsdata %>% filter(shf_ef_cat == "HFpEF"), stratavar = "sos_com_copd2", novar = "shf_ef_cat")
```
